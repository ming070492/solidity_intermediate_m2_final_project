import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@src/styles/Home.module.css'
import { useState } from 'react'
import { useEffect } from 'react'
import {ethers} from "ethers";
import contract_abi from '@src/src/artifacts/contracts/BankingContract.sol/BankingContract.json';
const inter = Inter({ subsets: ['latin'] })

const contractAddress = "0x663F3ad617193148711d28f5334eE4Ed07016602";
const BankingContractAbi = contract_abi.abi;

export default function Home() {

  const [isConnected, setIsConnected] = useState(false);
  const [provider, setProvider] = useState();
  const [connectedWallet, setIsConnectedWallet] = useState();
  const [contract, setContract] = useState();
  const [signer, setSigner] = useState();
  const [currentBalance, setCurrentBalance] = useState();

  const connectMetamask = async() => {
    if(typeof window.ethereum !== "undefined") {
      try {
        let wallet = await ethereum.request({ method: "eth_requestAccounts" });
        setIsConnectedWallet(wallet);
        setIsConnected(true);
        const connectedProvider = new ethers.providers.Web3Provider(window.ethereum);
        const s = await connectedProvider.getSigner();
        setProvider(connectedProvider);
        setSigner(s);
      } catch (e) {
        console.log(e);
      }
    }else{
      setIsConnected(false);
    }
  }

  const callContract = async() => {
    const bankingContract = new ethers.Contract(contractAddress, BankingContractAbi, signer);
    setContract(bankingContract);
  }

  const balanceInquiry = async() => {
    setCurrentBalance((await contract.bal_inquiry()).toNumber());
  } 

  const deposit = async() => {
    let amount = prompt("DEPOSIT AMOUNT:");
    let dep = await contract.deposit(amount);
    await dep.wait();
    balanceInquiry();
  }

  const withdraw = async() => {
    try {
      let amount = prompt("WITHDRAW AMOUNT:");
      let wit = await contract.withdraw(amount);
      await wit.wait();
      balanceInquiry();
    } catch (e) {
      alert("Unable to withdraw.");
    }
  }

  useEffect(() => {
    if(contract !== undefined) { 
      balanceInquiry();
    }
  }, [contract]);


  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        {!isConnected && <button className='button-connect-enabled' onClick={connectMetamask}>CONNECT</button>}
        {isConnected && 
            <div className='flex-div'>
              <button className='button-connect-disabled' disabled>CONNECTED</button>
              <span className='cont'><span className='label1'>WALLET ADDRESS:</span> {connectedWallet}</span>
              {!contract && <button className='button-connect-enabled' onClick={callContract}>CONNECT SMART CONTRACT</button> }
              {contract && 
                <div id='div2' className='flex-div'>
                <button className='button-connect-disabled' disabled>CONTRACT CONNECTED</button>
                <span className='cont'><span className='label1'>BALANCE:</span> {currentBalance}</span>
                <button className='button-connect-enabled' onClick={deposit}>DEPOSIT</button>
                <button className='button-connect-enabled' onClick={withdraw}>WITHDRAW</button>
                </div> }
            </div>
        }
      </main>
    </>
  )
}
